<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+


    public void GenerateEnum( string enumName, string tableName, string column, string value)
    {
        enumName = enumName.EndsWith("Type")? enumName : enumName + "Type";
        var builder = new StringBuilder();
		builder.Append("// <auto-generated>");
		builder.Append(Environment.NewLine);
		builder.Append("//		This code was generated from EnumGenerator.tt");
		builder.Append(Environment.NewLine);
		builder.Append("//");
		builder.Append(Environment.NewLine);
		builder.Append("//		Manual changes to this file may cause unexpected behavior in your application.");
		builder.Append(Environment.NewLine);
		builder.Append("//	    Manual changes to this file will be overwritten if the code is regenerated.");
		builder.Append(Environment.NewLine);
		builder.Append("//");
		builder.Append(Environment.NewLine);
		builder.Append("// <auto-generated>");
		builder.Append(Environment.NewLine);
		builder.Append("namespace MsSqlEnumGenerator");
        builder.Append(Environment.NewLine);
        builder.Append("{");
        builder.Append(Environment.NewLine);
        builder.AppendFormat("{0}public enum {1}", Indent, enumName);
        builder.Append(Environment.NewLine);
        builder.AppendFormat("{0}{{", Indent);
        builder.Append(Environment.NewLine);
        ReadFormDb(builder, tableName, column, value);
        builder.Append(Environment.NewLine);
        builder.AppendFormat("{0}}}", Indent);
        builder.Append(Environment.NewLine);
        builder.AppendFormat("}}");
		var templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        var outputFilePath = Path.Combine(templateDirectory, enumName + ".cs");
        if (File.Exists(outputFilePath))
        {
            File.Delete(outputFilePath);
        }
        File.WriteAllText(outputFilePath, builder.ToString());
        GenerationEnvironment.Remove(0, GenerationEnvironment.Length);
    }

    public void ReadFormDb(StringBuilder builder, string tableName, string column, string value)
    {
        string command = String.Format(@"SELECT t.{0},t.{1} FROM {2} AS t ORDER BY t.{0}", column, value, tableName);
        var conn = new SqlConnection(ConnectionString);
        var comm = new SqlCommand(command, conn);
        conn.Open();
        var reader = comm.ExecuteReader();
        bool loop = reader.Read();
        var newLine = "," + Environment.NewLine;
        while (loop)
        {
            builder.AppendFormat("{0}{0}{1} = {2}{3}", Indent, Pascalize(reader[column].ToString()), reader[value],
                (loop = reader.Read())  ? newLine : string.Empty);
        }
        conn.Close();
    }

	public string Pascalize(string propertyName)
	{
		var r = new Regex(@"(\s,-|/|_)+");
	    propertyName = r.Replace(propertyName,"");
		propertyName = Regex.Replace(propertyName, @"\s+", " ", RegexOptions.Multiline);
		var cultureInfo = System.Globalization.CultureInfo.CreateSpecificCulture("en-US");
		var textInfo = cultureInfo.TextInfo;
	    var words = propertyName.Split(' ');
	    if (words.Length == 1)
	    {
	        return words[0];
	    }
	    string result = "";
	    foreach (var word in words)
	    {
	        result += textInfo.ToTitleCase(word);
	    }
	    return result;
	}

	public string Indent { get { return "	"; } }

	public string ConnectionString
    {
	    get
	    {
			var configurationFileMap = new ExeConfigurationFileMap();
			configurationFileMap.ExeConfigFilename = this.Host.ResolvePath("App.config");
			var configuration = ConfigurationManager.OpenMappedExeConfiguration(configurationFileMap, ConfigurationUserLevel.None);
	        return configuration.ConnectionStrings.ConnectionStrings["Default"].ConnectionString;
	    }
    }
#>